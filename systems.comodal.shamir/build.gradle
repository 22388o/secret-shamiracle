apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'pl.allegro.tech.build.axion-release'

scmVersion {
  tag {
    prefix = project.name
  }
  repository {
    if (project.hasProperty("AXION_RELEASE_GITHUB_TOKEN")) {
      customUsername = project.AXION_RELEASE_GITHUB_TOKEN
    }
    pushTagsOnly = true
  }
}

project.version = scmVersion.version
project.group = 'systems.comodal'

sourceCompatibility = JavaVersion.VERSION_11

ext {
  desc = 'Shamir Secret Sharing'
  bintrayOrg = 'comodal'
  bintrayRepo = 'libraries'
  vcsUrl = 'https://github.com/comodal/secret-shamiracle'
  moduleName = 'systems.comodal.shamir'
}

repositories {
  mavenCentral()
  maven { url "https://repository.apache.org/content/repositories/snapshots/" }
}

dependencies {
  testImplementation 'org.apache.commons:commons-math4:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:+'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
}

compileJava {
  inputs.property("moduleName", moduleName)
  doFirst {
    options.compilerArgs = [ '--module-path', classpath.asPath ]
    classpath = files()
  }
}

compileTestJava {
  inputs.property("moduleName", moduleName)
  doFirst {
    options.compilerArgs = [
        '--module-path', classpath.asPath,
        '--add-modules', 'org.junit.jupiter.api,commons.math4',
        '--add-reads', "$moduleName=org.junit.jupiter.api,commons.math4",
        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath
    ]
    classpath = files()
  }
}

test {
  useJUnitPlatform()
  inputs.property("moduleName", moduleName)
  doFirst {
    jvmArgs = [
        '--module-path', classpath.asPath,
        '--add-modules', 'ALL-MODULE-PATH',
        '--add-reads', "$moduleName=org.junit.jupiter.api,commons.math4",
        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
        '--add-opens', "$moduleName/systems.comodal.shamir=org.junit.platform.commons"
    ]
    classpath = files()
  }
}

jacoco {
  toolVersion = "+"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled false
  }
}

afterEvaluate {
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        groupId project.group
        artifactId project.name
        version = project.version
      }
    }
  }

  bintray {
    user = project.hasProperty("bintrayUser") ? bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty("bintrayApiKey") ? bintrayApiKey : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    pkg {
      userOrg = project.bintrayOrg
      repo = project.bintrayRepo
      name = project.name
      desc = project.desc
      vcsUrl = project.vcsUrl
      websiteUrl = project.vcsUrl
      issueTrackerUrl = project.vcsUrl + '/issues'
      licenses = ["Apache-2.0"]
      publish = true
      version {
        name = project.version
        vcsTag = project.name + '-' + project.version
        gpg {
          sign = true
          passphrase = project.hasProperty("bintrayGPGPassphrase") ? bintrayGPGPassphrase : System.getenv('BINTRAY_GPG_PASSPHRASE')
        }
      }
    }
  }
}
