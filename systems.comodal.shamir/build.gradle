apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'org.javamodularity.moduleplugin'

scmVersion {
  tag.prefix = ''
  repository.pushTagsOnly = true
}

project.version = scmVersion.version
project.group = 'systems.comodal'

sourceCompatibility = JavaVersion.VERSION_12

ext {
  desc = 'Shamir Secret Sharing'
  bintrayOrg = 'comodal'
  bintrayRepo = 'libraries'
  vcsUrl = 'https://github.com/comodal/secret-shamiracle'
  moduleName = 'systems.comodal.shamir'
}

repositories {
  mavenCentral()
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:+'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:+'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:+'
}

compileJava {
  inputs.property("moduleName", moduleName)
  doFirst {
    options.compilerArgs = [ '--module-path', classpath.asPath ]
    classpath = files()
  }
}

test {
  useJUnitPlatform()
  maxParallelForks = 4
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams true
  }
  moduleOptions {
    runOnClasspath = true
  }
}

jacoco {
  toolVersion = "+"
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled false
  }
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: '**/apache/**')
    }))
  }
}

afterEvaluate {
  task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        groupId project.group
        artifactId project.name
        version = project.version
      }
    }
  }

  bintray {
    user = project.hasProperty("bintrayUser") ? bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty("bintrayApiKey") ? bintrayApiKey : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    pkg {
      userOrg = project.bintrayOrg
      repo = project.bintrayRepo
      name = project.name
      desc = project.desc
      vcsUrl = project.vcsUrl
      websiteUrl = project.vcsUrl
      issueTrackerUrl = project.vcsUrl + '/issues'
      licenses = ["Apache-2.0"]
      publish = true
      version {
        name = project.version
        vcsTag = project.name + '-' + project.version
        gpg {
          sign = true
          passphrase = project.hasProperty("bintrayGPGPassphrase") ? bintrayGPGPassphrase : System.getenv('BINTRAY_GPG_PASSPHRASE')
        }
      }
    }
  }
}
